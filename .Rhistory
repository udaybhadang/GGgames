q <- as.POSIXct(x)
q
names(q)
names(unclass(q))
names(unclass(p))
unclass(x)
x$sec
names(unclass(x))
p$sec
make.NegLogLok <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5 * length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2 / (sigma^2))
-(a+b)
}
}
make.NegLogLok(airquality)
ls(environment(nLL))
/rnorm
?rnorm
ls(environment(nLL))
ls(environment(fun = ))
ls()
?ls
?environment()
?ls
library('swirl')
swirl()
T = T
TRUE = TRUE
TRUE == TRUE
(FALSE == FALSE ) == FALSE
(FALSE == TRUE ) == FALSE
6 ==7
6 < 7
10 <= 10
TRUE != FALSE
5 != 7
5 !=7
5 ==7
!(5==7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE || C(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 !=8 && 4 > 3,9
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 ==6 , ! FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring_function()
boring_function
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
x <- sum(my_vector)/ length(my_vector)
x
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor = 2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
submit()
evaluate(sd(), c(1.4,3.6,7.9,8.8))
evaluate(sd(), x = c(1.4,3.6,7.9,8.8))
evaluate(sd(), c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6 )
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste('Programming', 'is', 'fun!')
telegram <- function(...){
paste('START', ..., 'STOP')
}
submit()
telegram <- function(...){
paste('START ', ..., ' STOP')
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram('wassup', 'bbrrrrooooootttthhhheeer!!')
mad_libs <- function(...){
# Do your argument unpacking here!
unpk <- list(...)
place <- unpk[['place']]
adjective <- unpk[['adjective']]
noun <- unpk[['noun']]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
unpk <- list(...)
place <- unpk[['place']]
adjective <- unpk[['adjective']]
noun <- unpk[['noun']]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs('Mainland', 'awesome', 'grit')
"%p%" <- function(left, right)
{ # Remember to add arguments!
paste(left, right)
}
submit()
'I''%p%''love''%p%''R'
'I'"%p%"love'"%p%"R'
'I' "%p%" 'love' "%p%" 'R'
' 'I' "%p%" 'love' "%p%" 'R' '
" 'I' "%p%" 'love' "%p%" 'R' "
'I' %p% 'love' %p% 'R'
info()
'I' %p% 'love' %p% 'R!'
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
?rnorm
y <- rnorm(2 * 2 * 10)
y
?array
?head
library()
library(datasets)
head(airquality)
s <- split(airquality, airquality['Month'])
tapply(airquality, s, colMeans(s, c('ozone', 'solar.R', 'Wind')))
s <- split(airquality, airquality[['Month']])
tapply(airquality, s, colMeans(s, c('ozone', 'solar.R', 'Wind')))
s <- split(airquality, airquality$Month)
tapply(airquality, s, colMeans(s, c('ozone', 'solar.R', 'Wind')))
s <- split(airquality, airquality$Month)
s
tapply(airquality, s, colMeans(as.array(s), c('ozone', 'solar.R', 'Wind')))
tapply(s, colMeans(s, c('ozone', 'solar.R', 'Wind')))
tapply(s, colMeans(s, dims = c('ozone', 'solar.R', 'Wind')))
dim(s)
tapply(s, function(x){ colMeans(x, dims = c('ozone', 'solar.R', 'Wind'))})
tapply(s, function(x) colMeans(x, dims = c('ozone', 'solar.R', 'Wind'))
tapply(s, function(x) colMeans(x, dims = c('ozone', 'solar.R', 'Wind')))
tapply(s, function(x) colMeans(x, dims = c('ozone', 'solar.R', 'Wind')))
lapply(s, function(x) colMeans(x, dims = c('ozone', 'solar.R', 'Wind')))
lapply(s, function(x) colMeans(x, c('ozone', 'solar.R', 'Wind')))
?colMeans
lapply(s, function(x) colMeans(x[, c('ozone', 'solar.R', 'Wind')]))
lapply(s, function(x) colMeans(x[, c('Ozone', 'Solar.R', 'Wind')]))
tapply(airquality,s, colMeans(s[, c('Ozone', 'Solar.R', 'Wind')]))
s[ ,c('Ozone', 'Solar.R', 'Wind')]
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, s[, c('Ozone', 'Solar.R', 'Wind')]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, s[, c(
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, s[, c('ozone', 'Solar.R', 'Wind')]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, s[, c('ozone', 'Solar.R', 'Wind')]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, x[, c('ozone', 'Solar.R', 'Wind')]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, x[, c('Ozone', 'Solar.R', 'Wind')]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c('Ozone', 'Solar.R', 'Wind')]))
?invisible
?load
?set.seed
gl(40, 10)
?svd
?outer
?numeric
library('swril')
library('swirl')
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply)(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colour <- flags[, 11:17]
flag_colours <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_color, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[.19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_maat)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
saply(flags, class)
sapply(flags, class)
vapply(flags,class, character(1))
?tapply
flags$landmass
table(flags$landmass)
?table
table(flags$animate)
?tapply
tapply(flags$animate,flags$landmass, mean )
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$population, summary)
tapply(flags$landmasses, flags$population, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size
object.size(plants)
names(plants)
head()
head(plants)
?head
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, replace = TRUE)
sample(1:6,4,  replace = TRUE)
sample(1:6,4,  replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom
rbinom(1, 100, 0.7)
flips2 <- rbinom(1, 100, 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips1)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$dist, cars$speed)
?plot
plot(cars$speed, cars$dist, xlab= 'Speed')
plot(cars$speed, cars$dist, xlab= 'Speed', ylab = 'stopping Distance')
plot(cars$speed, cars$dist, xlab= 'Speed', ylab = 'Stopping Distance')
plot(cars$speed, cars$dist, ylab = 'Stopping Distance')
plot(cars$speed, cars$dist, xlab= 'Speed', ylab = 'Stopping Distance')
?plot
plot(cars, main = 'My Plot')
plot(cars, sub = 'My Plot Subtitle')
?par
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
library(swirl)
swirl()
?ggplot2
install.packages('ggplot2')
?ggplot2
??ggplot2
ggplot2()
swirl()
install.packages('swirl')
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)!parent,galton)
plot(jitter(child,4)~parent,galton)
regline <- lm(child~parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
fit <- lm(child ~ parent, galton)
?jitter
summary(fit)
mean(fit$residuals)
civ(fit$residuals, galton$parent)
cov(fit$residuals, galton$parent)
exit()
bye()
git init
git init
htmlfile <- url('http://google.com')
htmlfile
htmlfile.readlines()
readline(htmlfile)
readline('htmlfile')
n <- length(htmlfile)
for (i = 1:n) {
readline(htmlfile)
n <- length(htmlfile)
for (i in 1:n) {
readline(htmlfile)
}
n <- length(htmlfile)
for (i in 1:n) {
htmltext <-  readline(htmlfile)
htmltext
}
htmltext
url('http:\\google.com')
url('http://google.com')
readlines('http://google.com')
readline('http://google.com')
setwd("D:/Courses/data file")
f <- read.talbe('ggevent.log')
f <- read.table('ggevent.log')
f <- read.table("ggevent.log")
setwd("D:/Courses/data file/GG Data File")
setwd("D:/Courses/data file/GG Data File")
f <- read.table("ggevent.log")
f <- file('ggevent.log')
f
read.file(f)
readLines(f)
?scan
?replace
?scan
scan('data.log')
readline('data.log')
readline(data.log)
readline(f)
for (lines in readLines(f){
for (char in lines){
if (char==','){
char = ''
}
}
if (char == ':'){
char = ''
}
if (char == ','){
char = ''
}
}
for (lines in readLines(f){
for (char in lines){
if (char==','){
char = ''
}
}
if (char == ":"){
char = ''
}
if (char == ''){
char = ''
}
if (char == "{"){
char == ''
}
if (char == "}"){
char = ''
}
if (char == '"'){
char == ''
}
}
for (lines in readLines(f){
for (char in lines){
if (char==','){
char = ' '
}
}
if (char == ":"){
char = ' '
}
if (char == "{"){
char == ' '
}
if (char == "}"){
char = ''
}
if (char == '"'){
char == ' '
}
}
>file.edit
?file.edit
f <- open('D:\Courses\data file\GG Data File\data.log')
f <- open('D:\Courses\data file\GG Data File\data.log')
f <- open('D:/Courses/data file/GG Data File/data.log')
file <- open('D:\Courses\data file\GG Data File\data.log')
rm(f)
rm(char)
f <- open('D:/Courses/data file/GG Data File/data.log')
f <- open("D:/Courses/data file/GG Data File/data.log")
f <- open("D:\Courses\data file\GG Data File\data.log")
